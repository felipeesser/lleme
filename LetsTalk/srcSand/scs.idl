#ifndef SCS_IDL
#define SCS_IDL

   exception StartupFailed {};
   exception ShutdownFailed {};
   exception InvalidName {
      string name;
   };
   exception InvalidConnection {};
   exception AlreadyConnected {};
   exception ExceededConnectionLimit {};
   exception NoConnection {};
   
   exception InternalError {};
   
   typedef unsigned long ConnectionId;
   typedef sequence<string> NameList;

   struct FacetDescription {
      string name;
      string interface_name;
      Object facet_ref;
   };
   typedef sequence<FacetDescription> FacetDescriptions;

   struct ConnectionDescription {
      ConnectionId id;
      Object objref;
   };
   typedef sequence<ConnectionDescription> ConnectionDescriptions;

   struct ReceptacleDescription {
      string name;
      string interface_name;
      boolean is_multiplex;
      ConnectionDescriptions connections;
   };
   typedef sequence<ReceptacleDescription> ReceptacleDescriptions;
      
   interface IComponent {
      Object getFacet (in string facet_interface);
      Object getFacetByName (in string facet);
   
      void startup() raises (StartupFailed);
      void shutdown() raises (ShutdownFailed);

      //Receptacle
      ConnectionId connect (in string receptacle, in Object obj)
         raises (InvalidName, InvalidConnection, AlreadyConnected,
                 ExceededConnectionLimit);
      void disconnect (in ConnectionId id)
         raises (InvalidConnection, NoConnection);
      ConnectionDescription getConnection (in ConnectionId id)
         raises (InvalidConnection);
      ConnectionDescriptions getConnections (in string receptacle)
         raises (InvalidName);

      //MetaInterface
      FacetDescriptions getFacets();
      FacetDescriptions getFacetsByName(in NameList names)
         raises (InvalidName);
      ReceptacleDescriptions getReceptacles();
      ReceptacleDescriptions getReceptaclesByName(in NameList names)
         raises (InvalidName);
   };
   
   interface SCS {
   		IComponent getIComponent(in string className,in unsigned long instance_id) raises (InternalError);
   		IComponent releaseIComponent(in string className, in unsigned long instance_id);
};
   
#endif
