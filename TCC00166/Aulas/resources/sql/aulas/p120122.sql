DROP TABLE Atribuicao CASCADE CONSTRAINTS ;
DROP TABLE Cliente CASCADE CONSTRAINTS ;
DROP TABLE Especialidade CASCADE CONSTRAINTS ;
DROP TABLE Execucao CASCADE CONSTRAINTS ;
DROP TABLE Mecanico CASCADE CONSTRAINTS ;
DROP TABLE Multa CASCADE CONSTRAINTS ;
DROP TABLE ORCAMENTO CASCADE CONSTRAINTS ;
DROP TABLE Ordem_Servico CASCADE CONSTRAINTS ;
DROP TABLE Servico CASCADE CONSTRAINTS ;
DROP TABLE Veiculo CASCADE CONSTRAINTS ;

CREATE TABLE Atribuicao ( 
     numero_os NUMBER (10)  NOT NULL , 
     id_servico NUMBER (10)  NOT NULL , 
     ID_MECANICO NUMBER (10)  NOT NULL , 
     DATA DATE  NOT NULL,
     PRIMARY KEY ( NUMERO_OS, ID_SERVICO, ID_MECANICO ),
     CONSTRAINT E_COMPOSTA_DE FOREIGN KEY (NUMERO_OS) REFERENCES ORDEM_SERVICO (NUMERO_OS),
     CONSTRAINT EXECUTA FOREIGN KEY (ID_MECANICO) REFERENCES MECANICO (ID_MECANICO),
     CONSTRAINT RECEBE FOREIGN KEY (ID_SERVICO) REFERENCES Servico (id_servico));

CREATE TABLE Cliente ( 
     id_cliente NUMBER (10)  NOT NULL , 
     nome VARCHAR2 (200)  NOT NULL , 
     TELEFONE NUMBER (10)  NOT NULL ,
     PRIMARY KEY ( id_cliente ) );


CREATE TABLE Especialidade ( 
     id_especialidade NUMBER (10)  NOT NULL , 
     DENOMINACAO VARCHAR2 (200)  NOT NULL ,
     PRIMARY KEY ( id_especialidade ) );


CREATE TABLE Execucao    ( 
     numero_os NUMBER (10)  NOT NULL , 
     id_servico NUMBER (10)  NOT NULL , 
     id_mecanico NUMBER (10)  NOT NULL , 
     inicio DATE , 
     FIM DATE ,
     PRIMARY KEY ( NUMERO_OS, ID_SERVICO, ID_MECANICO ),
     CONSTRAINT EXECUCAO_DATAS_CK CHECK (FIM > INICIO OR FIM IS NULL),
     CONSTRAINT GERA FOREIGN KEY (NUMERO_OS,ID_SERVICO,ID_MECANICO) REFERENCES Atribuicao (numero_os,id_servico,id_mecanico));


CREATE TABLE Mecanico     ( 
     id_mecanico NUMBER (10)  NOT NULL , 
     nome VARCHAR2 (200)  NOT NULL , 
     ID_ESPECIALIDADE NUMBER (10)  NOT NULL ,
     PRIMARY KEY ( ID_MECANICO ),
     CONSTRAINT AGRUPA_MECANICO FOREIGN KEY (ID_ESPECIALIDADE) REFERENCES Especialidade (id_especialidade));
    

CREATE TABLE Multa     ( 
     data DATE  NOT NULL , 
     inicio_faixa NUMBER (4,3)  NOT NULL , 
     FIM_FAIXA NUMBER (4,3)  NOT NULL ,
     PRIMARY KEY ( data ) );


CREATE TABLE Orcamento     ( 
     numero_os NUMBER (10)  NOT NULL , 
     numero NUMBER (2)  NOT NULL , 
     data DATE  NOT NULL , 
     valor NUMBER (10,2)  NOT NULL , 
     ACEITE DATE  ,
     PRIMARY KEY ( NUMERO, NUMERO_OS ) ,
     CONSTRAINT ORCAMENTO_DATAS_CK CHECK (ACEITE > "DATA" OR ACEITE IS NULL),
     CONSTRAINT POSSUI FOREIGN KEY (NUMERO_OS) REFERENCES Ordem_Servico (numero_os));


CREATE TABLE Ordem_Servico     ( 
     numero_os NUMBER (10)  NOT NULL , 
     id_cliente NUMBER (10)  NOT NULL , 
     licensa VARCHAR2 (10)  NOT NULL , 
     queixa VARCHAR2 (200)  NOT NULL , 
     multa NUMBER (4,3)  NOT NULL , 
     abertura DATE  NOT NULL , 
     ENCERRAMENTO DATE , 
     ID_MECANICO NUMBER (10) ,
     PRIMARY KEY ( numero_os ),
     CONSTRAINT ABRE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE (ID_CLIENTE),
     CONSTRAINT CUIDA FOREIGN KEY (ID_MECANICO) REFERENCES MECANICO (ID_MECANICO),
     CONSTRAINT SOFRE FOREIGN KEY (LICENSA) REFERENCES Veiculo (licensa));


CREATE TABLE Servico     ( 
     id_servico NUMBER (10)  NOT NULL , 
     denominacao VARCHAR2 (200)  NOT NULL , 
     ID_ESPECIALIDADE NUMBER (10)  NOT NULL),
     PRIMARY KEY ( id_servico ),
     CONSTRAINT AGRUPA_SERVICO FOREIGN KEY (ID_ESPECIALIDADE) REFERENCES Especialidade (id_especialidade));


CREATE TABLE Veiculo     ( 
     licensa VARCHAR2 (10)  NOT NULL , 
     marca VARCHAR2 (10)  NOT NULL , 
     MODELO VARCHAR2 (10)  NOT NULL ,
     PRIMARY KEY ( licensa ) );



create or replace
TRIGGER VALIDA_ORDEM_SERVICO 
BEFORE INSERT OR UPDATE ON "ORDEM_SERVICO"
REFERENCING OLD AS ANTIGO NEW AS NOVO
for each row
DECLARE 
  INICIO NUMBER(4,3);
  FIM NUMBER(4,3);
  "DATA" date;
BEGIN
  -- Verifica se o valor da multa é permitido
  WITH
    T1 AS (SELECT MAX("DATA") AS "VIGENCIA" FROM MULTA WHERE "DATA"<=:NOVO.ABERTURA)
  SELECT INICIO_FAIXA,FIM_FAIXA INTO INICIO,FIM FROM "MULTA" WHERE "DATA"=(SELECT "VIGENCIA" FROM T1);
  if (not(:NOVO.MULTA between INICIO and FIM)) then
    RAISE_APPLICATION_ERROR(-20001,'ERRO');
  END IF;
  -- Verifica data abertura
  SELECT MIN("DATA") INTO "DATA" FROM "ORCAMENTO" WHERE "NUMERO_OS"=:NOVO."NUMERO_OS";
  IF (:NOVO.ABERTURA > "DATA") THEN
    RAISE_APPLICATION_ERROR(-20001,'ERRO');
  END IF;
  -- Verifica encerramento
  WITH
    T1 AS (SELECT MAX(T2."FIM") AS "DATA" FROM ATRIBUICAO T1 LEFT JOIN EXECUCAO T2 ON 
           T1.NUMERO_OS = T2.NUMERO_OS AND T1.ID_SERVICO=T2.ID_SERVICO AND T1.ID_MECANICO=T2.ID_MECANICO
           WHERE T1.NUMERO_OS=:NOVO.NUMERO_OS),
    T2 AS (SELECT MAX(T2."INICIO") AS "DATA" FROM ATRIBUICAO T1 LEFT JOIN EXECUCAO T2 ON 
           T1.NUMERO_OS = T2.NUMERO_OS AND T1.ID_SERVICO=T2.ID_SERVICO AND T1.ID_MECANICO=T2.ID_MECANICO
           WHERE T1.NUMERO_OS=:NOVO.NUMERO_OS),
    T3 AS (SELECT MAX("DATA") AS "DATA" FROM ATRIBUICAO WHERE NUMERO_OS=:NOVO.NUMERO_OS),
    T4 AS (SELECT MAX("ACEITE") AS "DATA" FROM "ORCAMENTO" WHERE "NUMERO_OS"=:NOVO."NUMERO_OS"),
    T5 AS (SELECT "DATA" FROM T1 
           UNION SELECT "DATA" FROM T2 
           UNION SELECT "DATA" FROM T3
           UNION SELECT "DATA" FROM T4)
  SELECT MAX("DATA") INTO "DATA" FROM T5;
  IF (:NOVO.ENCERRAMENTO < "DATA") THEN
    RAISE_APPLICATION_ERROR(-20001,'ERRO');
  END IF;
END;

CREATE OR REPLACE
TRIGGER VALIDA_ORCAMENTO 
BEFORE INSERT OR UPDATE ON "ORCAMENTO"
REFERENCING OLD AS ANTIGO NEW AS NOVO
for each row
DECLARE 
  CARDINALIDADE NUMBER(2);
BEGIN
  -- Verifica cardinalidade
  SELECT COUNT(*) INTO CARDINALIDADE FROM ORCAMENTO WHERE NUMERO_OS=:NOVO.NUMERO_OS;
  IF ((:NOVO.NUMERO_OS != :ANTIGO.NUMERO_OS or :ANTIGO.NUMERO_OS IS NULL) AND CARDINALIDADE =2) THEN
    RAISE_APPLICATION_ERROR(-20001,'ERRO');
  END IF;
  -- Verificar data
END;

create or replace
TRIGGER VALIDA_ATRIBUICAO 
BEFORE INSERT OR UPDATE ON "ATRIBUICAO"
REFERENCING OLD AS ANTIGO NEW AS NOVO
for each row
DECLARE 
  ID1 NUMBER(10);
  ID2 NUMBER(10);
BEGIN
  -- Verifica especialidade
  SELECT ID_ESPECIALIDADE INTO ID1 FROM MECANICO WHERE ID_MECANICO=:NOVO.ID_MECANICO;
  SELECT ID_ESPECIALIDADE INTO ID2 FROM SERVICO WHERE ID_SERVICO=:NOVO.ID_SERVICO;
  
  IF (ID1 != ID2) THEN
    RAISE_APPLICATION_ERROR(-20001,'ERRO');
  END IF;
END;