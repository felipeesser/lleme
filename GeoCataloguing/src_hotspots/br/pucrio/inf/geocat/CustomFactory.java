/* Generated by Together */

package br.pucrio.inf.geocat;

import java.util.HashMap;

import br.pucrio.inf.catfwk.model.Builder;
import br.pucrio.inf.catfwk.model.DictionaryDescBuilder;
import br.pucrio.inf.catfwk.model.FrameworkFactory;
import br.pucrio.inf.catfwk.model.Gazetteer;
import br.pucrio.inf.catfwk.model.InvalidDictionaryException;
import br.pucrio.inf.catfwk.model.RepositoryDescBuilder;

/**
 * @author Luiz André
 * @version 1.0
 * @since 1.0
 * @alias CustomFactory*/
public class CustomFactory extends FrameworkFactory {

	private static final long serialVersionUID = 6193504905240602469L;

	public static final String ADL_DICTIONARY = "ADL";

	public HashMap createParsers(Builder builder) {
		HashMap readers = new HashMap();
		readers.put("xml", new XMLParser(builder));
		return readers;
	}

	public Gazetteer[] createDictionaries(String[][] urls)
			throws InvalidDictionaryException {

		Gazetteer[] dictionaries = new Gazetteer[urls.length];
		for (int i = 0; i < urls.length; i++) {
			if (urls[i][0] == null || urls[i][1] == null)
				throw new InvalidDictionaryException(
						"Dictionary URL/type==null");
			if (urls[i][1] == ADL_DICTIONARY)
				dictionaries[i] = new ADLGazeteer(urls[i][1]);
			else
				dictionaries[i] = new ADLGazeteer(urls[i][1]);
		}
		return dictionaries;
	}

	public RepositoryDescBuilder createRepositoryDescBuilder() {
		return new ISO19115ImageBuilder();
	}

	public DictionaryDescBuilder createDictionaryDescBuilder() {
		return new ISO19115ADLFeaturesBuilder();
	}
}
